---
- hosts: all
  become: True
  gather_facts: False
  vars:
#    csv_file: "./schedule_list.csv"
    cron_file: auter
    days_later: "{{ lookup('csvfile', inventory_hostname.split(':')[0] + ' file=' + csv_file + ' col=1 delimiter=,') }}"
  vars_prompt:
    name: csv_file
    default: "./schedule_list.csv"
    prompt: "Enter config file"
    private: no 


  tasks:
    - debug:
        msg: "{{ days_later }}"
      tags:
        - debug

    - name: Pre-check if server has configuration set in CSV file
      tags:
        - always
      become: False
      changed_when: False
      local_action: command grep ^{{ inventory_hostname.split(':')[0] }}, {{ csv_file }}

    - name: Lookup schedule hour from the CSV file
      set_fact:
        hour: "{{ lookup('csvfile', inventory_hostname.split(':')[0] + ' file=' + csv_file + ' col=2 delimiter=,').split(':')[0] }}"
    - name: Fail if server's schedule hour is invalid
      fail:
        msg: "schedule hour for {{ inventory_hostname.split(':')[0] }} is invalid"
      when:
        hour != hour|int|string or hour|int < 0 or hour|int > 23

    - name: Lookup schedule minute from the CSV file
      set_fact:
        minute: "{{ lookup('csvfile', inventory_hostname.split(':')[0] + ' file=' + csv_file + ' col=2 delimiter=,').split(':')[1] }}"

    - name: Fail if server's schedule minute is invalid
      fail:
        msg: "schedule minute for {{ inventory_hostname.split(':')[0] }} is invalid"
      when:
        minute != minute|int|string or minute|int < 0 or minute|int > 59

    - name: Create advancedPrepSchedule
      lineinfile:
        create: yes
        state: present
        regexp: '/usr/bin/auter --prep'
        dest: /etc/auter/advancedPrepSchedule
        mode: 0755
        line: "[[ $(date +%D) == $(date --date $(date +%Y-%m)-$(LC_ALL=C cal | cut -b 7-8 | xargs | awk '{print $4}') +%D) ]] && /usr/bin/auter --prep"

#    - name: Remove old advancedApplySchedule
#      tags:
#        - ApplySchedule
#      file:
#        dest: /etc/auter/advancedApplySchedule
#        state: absent

    - name: Create advancedApplySchedule
      tags:
        - ApplySchedule
      blockinfile:
        backup: yes
        create: yes
        state: present
        marker: '# {mark} ANSIBLE MANAGED BLOCK'
        dest: /etc/auter/advancedApplySchedule
        mode: 0755
        block: |
          # Get the current months second tuesday day
          PatchTuesdayDay="$(LC_ALL=C cal | cut -b 7-8 | xargs | awk '{print $4}')"

          # If the current day is less than this months second tuesday then use
          # previous months second tuesday
          if [[ $(date +%d) -lt ${PatchTuesdayDay} ]]; then
            # Note: the 15th is hard coded for a specific reason. See 28.6 in
            # info coreutils 'Relative items in date strings'
            PatchTuesday="$(date --date="$(date +%Y-%m-15) -1 month" +'%Y-%m')-$(LC_ALL=C cal -3 | cut -b 7-8 | xargs | awk '{print $4}')"
          else
            PatchTuesday="$(date +%Y-%m)-${PatchTuesdayDay}"
          fi

          # If todays date is equal to {{ days_later }} after patching tuesday then apply updates
          [[ $(date +%D) == $(date --date ${PatchTuesday}+{{ days_later }}days +%D) ]] && /usr/bin/auter --apply

# This creates a job that will run '/usr/bin/auter --prep'  on the second tuesday of the month
    - name: Add cron jobs as defined by the server's schedule group
      cron:
        name: "Auter Prep Tuesday:"
        cron_file: "{{ cron_file }}"
        minute: 5
        hour: 23
        user: "root"
        job: bash /etc/auter/advancedPrepSchedule

# This creates a job that will run '/usr/bin/auter --apply'  {{ daysLater }} after the second tuesday of the month
    - name: Add cron jobs as defined by the server's schedule group
      cron: 
        name: "Patch days after:"
        cron_file: "{{ cron_file }}"
        minute: "{{ minute }}"
        hour: "{{ hour }}"
        user: "root"
        job: bash /etc/auter/advancedApplySchedule

    - name: Get SSO from ~/.config/hammertime/config.yaml
      become: false
      local_action:
        module: shell awk '/^\s+username:.*[a-z]/ {print $2;exit;}' $HOME/.config/hammertime/config.yaml
      register: username
      failed_when: False
      changed_when: false
...
